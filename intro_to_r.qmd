---
params:
  answers: "visible" #"hidden"
format: 
  revealjs:
    author-steffi: true
    title: Creating Figures as an Intro to R
    subtitle: Using the `ggplot2` package
    workshop: "TWS 2023"
    date: today
    date-format: iso
    title-slide-attributes: 
      data-background-image: figures/horst_ggplot2.png
      data-background-size: "50%"
      data-background-position: "85% 80%"
    template-partials:
      - title-slide.html
    theme: [default, styles.scss]
    width: 1200
    slide-number: true
    fontsize: 1.7em
execute:
  echo: true
  cache: true
---

```{r setup, include = FALSE, cache=FALSE}
library(here)
library(ggplot2)
library(palmerpenguins)
library(patchwork)
options(width = 100)

visibility <- params$answers

knitr::opts_chunk$set(dpi = 150, fig.width = 8, out.width = "90%",
                      fig.align = "center", fig.asp = 0.45)
```

# Preamble


## Online workshops can be challenging


:::{.fragment}
### Consider keeping your video on [(if possible)]{.small}

- Kids? Pets? Spouses? No problem
- But ultimately, you need be comfortable! [(and you absolutely have the right to privacy)]{.small}
:::


:::{.fragment}
### Interrupt me!

- Generally keep yourself muted but un-mute anytime to ask questions
:::

:::{.fragment}
### Ask Questions!

- Group trouble-shooting is really valuable
- If you have a problem, others may also (or may have it in the future)
:::

:::{.fragment}
### Screen-sharing

- I may ask you to share your screen with the group [(feel free to decline)]{.small}
- For privacy, close your email etc. Or just share your RStudio window
:::

## This is me and my creatures {background-color="black" background-image="figures/creatures.jpg"}

## This is my garden {background-color="black" background-image="figures/garden.jpg"}

## What about you?

- Name
- Background (Role, Area of study, etc.)
- Familiarity with R or Programming
- Creatures (furry, feathery, scaley, green or otherwise)?

## Outline

### 1. A little about R

### 2. Creating figures with `ggplot2`

### 3. Combining figures with `patchwork`

### 4. Saving figures

. . .

::: spacer
> **Taken this or a similar workshop before?**
>
> During activities consider...
>
> -   Extra activities labeled "Too Easy?"
> -   Using your own data
> -   Exploring other aspects of ggplot2 that interest you
>
> <p>
>
> **Feel free to ask questions even if it's not the "official" activity!**
:::

# What is R?

## R is a Programming language

> A programming **language** is a way to give instructions in order to get a computer to do something

-   You need to know the language (i.e., the code)
-   Computers don't know what you mean, only what you type (unfortunately)
-   Spelling, punctuation, and capitalization all matter!

### For example {.spacer}

**R, what is 56 times 5.8?**

```{r}
#| code-line-numbers: false
56 * 5.8
```

## Use code to tell R what to do

::: fragment
### R, what is the average of numbers 1, 2, 3, 4? {.spacer}

```{r}
#| code-line-numbers: false
mean(c(1, 2, 3, 4))
```
:::

::: fragment
### R, save this value for later {.spacer}

```{r}
#| code-line-numbers: false
steffis_mean <- mean(c(1, 2, 3, 4))
```
:::

::: fragment
### R, multiply this value by 6 {.spacer}

```{r}
#| code-line-numbers: false
steffis_mean * 6
```
:::

# Why R?

## R is hard

![](figures/R_hard.png){fig-align="center"}

## But R is powerful (and reproducible)! {.nostretch}

![](figures/R_powerful2_edit.png){width="70%" fig-align="center" style="margin-top:5%"}

. . .

[(I made these slides with a mix of R and Quarto)]{.footnote}

## R is also beautiful

![](figures/spatial.png){fig-align="center"}

## R is affordable (i.e., free!) {.nostretch}

![](figures/R_free.png){width="70%" fig-align="center" style="margin-top:15%"}

## Impost**R** Syndrome

![](figures/impostR_en.png)

## Impost**R** Syndrome

::: {layout="[[-100], [-100], [50,50]]"}
![](figures/impostR_en.png)

![](figures/imposter.jpg)
:::

[David Whittaker]{.footnote}

. . .

> **Moral of the story?**<br> Make friends, code in groups, learn together and don't beat yourself up

## The Goal

![](figures/horst_monster1.jpg){.absolute left="10" bottom="150" width="50%"}

[Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

. . .

![](figures/horst_monster2.jpg){.absolute right="10" bottom="150" width="48%"}

# About R

## Code, Output, Scripts

::: columns
::: {.column width="50%"}
### Code

-   The actual commands

### Output {.spacer}

-   The result of running code or a script

### Script {.spacer}

-   A text file full of code that you want to run
-   You should always keep your code in a script
:::

::: {.column .fragment width="50%"}
### For example:

```{r}
#| code-line-numbers: false
mean(c(1, 2, 3, 4))
```

[**Code**]{.absolute right="20" top="150"}
[**Output**]{.absolute right="20" top="190"}

![](figures/script.png){.absolute right="125" bottom="0" width="38%"} 
[**Script**]{.absolute right="20" top="230"}
:::
:::

## RStudio vs. R

::: {layout="[[-2, 5, -2, 7, -2]]" layout-valign="center"}
![RStudio](figures/RStudio-Ball.png)

![R](figures/R.png)
::: 

-   **RStudio** is not **R**
-   RStudio is a User Interface or IDE (integrated development environment)
    -   (i.e., Makes coding simpler)

## `functions()` - Do things, Return things

### `mean()`, `read_csv()`, `ggplot()`, `c()`, etc. {.spacer}

::: fragment
-   Always have `()`
-   Can take **arguments** (think 'options')
    -   `mean(x = c(2, 10, 45))`,
    -   `mean(x = c(NA, 10, 2, 65), na.rm = TRUE)`
:::

::: fragment
-   Arguments defined by **name** or by **position**
    -   With correct position, do not need to specify by name
:::

::: {.columns .fragment}
::: {.column width="50%"}
### By name:

```{r}
#| code-line-numbers: false
mean(x = c(1, 5, 10))
```
:::

::: {.column width="50%"}
### By position:

```{r}
#| code-line-numbers: false
mean(c(1, 5, 10))
```
:::
:::

## R documentation

::: columns
::: {.column width="30%"}
```{r}
?mean
```
:::

::: {.column .fragment width="70%"}
![](figures/mean_docs.png)
:::
:::

## `Data`

Generally kept in `vectors` or `data.frames`

-   These are objects with names (like functions)
-   We can use `<-` to assign values to objects (assignment)

:::{.spacer}
   
:::

:::: {.columns .spacer}

::: {.column width="45%"}
### Vector (1 dimension)
```{r}
#| code-line-numbers: false
my_data <- c("a", 100, "c")
my_data
```
:::

::: {.column width="55%"}
### Data frame (2 dimensions)
```{r}
#| code-line-numbers: false
my_data <- data.frame(site = c("s1", "s2", "s3"),
                      count = c(101, 102, 103),
                      treatment = c("a", "b", "c"))
my_data
```
> rows x columns
:::

::::

# Your first *real* code!

## First Code

```{r first_code}
#| eval: false

# First load the packages
library(palmerpenguins)
library(ggplot2)

# Now create the figure
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point()
```
 
::: {.space-list .spacer}
1. **Copy/paste or type** this into the **script** window in RStudio
    - You may have to go to File \> New File \> R Script
2. Click on the **first line of code**
3. **Run the code**
    - Click 'Run' button (upper right) **or** 
    - Use the short-cut `Ctrl-Enter`
4. **Repeat** until all the code has run
:::

## First Code

```{r}
#| warning: true
<<first_code>>
```

## First Code

```{r}
#| warning: true
#| code-line-numbers: "2,3"
<<first_code>>
```

[Packages<br>`ggplot2` and `palmerpenguins`]{.note .absolute top="8%" right="0"}

## First Code

```{r}
#| warning: true
#| code-line-numbers: "2,3,6,7"
<<first_code>>
```

[Functions<br>`library()`, `ggplot()`, `aes()`, `geom_point()`]{.note .absolute top="8%" right="0"}

## First Code

```{r}
#| warning: true
#| code-line-numbers: "6"
<<first_code>>
```

[`+`<br>(Specific to `ggplot`)]{.note .absolute top="8%" right="0"}

## First Code

```{r}
#| warning: true
<<first_code>>
```

[Figure!]{.note .absolute bottom="30%" left="0"}

## First Code

```{r}
#| warning: true
<<first_code>>
```

[Warning]{.note .absolute bottom="57%" right="25%"}

## First Code

```{r}
#| warning: true
#| code-line-numbers: "1,5"
<<first_code>>
```

[Comments]{.note .absolute top="12%" left="35%"}

# Now you know R!

**Let's get started**

## Our data set: Palmer Penguins!

::: {layout="[5,25]" layout-valign="top"}
![](figures/hex_palmerpenguins.png)

![](figures/horst_lter_penguins.png)
:::

[Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

## Our data set: Palmer Penguins!

```{r}
library(palmerpenguins)
penguins
```

![](figures/hex_palmerpenguins.png){.absolute top="0" right="0" width="16%"}

[Artwork by [\@allison_horst](https://github.com/allisonhorst/stats-illustrations)]{.footnote}

::: columns
::: {.column width="35%"}
![](figures/horst_lter_penguins.png)
:::

::: {.column .fragment width="65%"}
> **Your turn!**
>
> Run this code and look at the output in the console
:::
:::

## A basic plot

```{r basic_plot}
#| fig-width: 6
#| fig-asp: 0.5
#| out-width: 70%

library(palmerpenguins)
library(ggplot2)

ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
    geom_point()
```

## Break it down

```{r}
#| code-line-numbers: "1"
#| eval: false
<<basic_plot>>
```

:::: {.columns}

::: {.column width="50%"}
### `library(palmerpenguins)`
-   Load the `palmerguins` package
-   Now we have access to `penguins` data
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::

::::

![](figures/hex_palmerpenguins.png){.absolute top=0 right=0 width=16%}

## Break it down

```{r}
#| code-line-numbers: "2"
#| eval: false
<<basic_plot>>
```

:::: {.columns}

::: {.column width="50%"}
### `library(ggplot2)`
- Load the `ggplot2` package
- Now we have access to the `ggplot()` function
  - [(and `aes()` and `geom_point()` etc.)]{.small}
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::

::::

![](figures/hex_ggplot2.png){.absolute top=0 right=0 width=16%}

## Break it down

```{r}
#| eval: false
#| code-line-numbers: "4"
<<basic_plot>>
```

::: columns
::: {.column width="50%"}
### `ggplot()`

-   Set the attributes of your plot
-   **`data`** = Dataset
-   **`aes`** = Aesthetics (how the data are used)
-   Think of this as your plot defaults
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig.asp: 0.75
#| fig.width: 6
<<basic_plot>>
```
:::
:::

## Break it down

```{r}
#| code-line-numbers: "5"
#| eval: false
<<basic_plot>>
```

::: columns
::: {.column width="50%"}
### `geom_point()`

-   Choose a `geom` function to display the data
-   Always *added* to a `ggplot()` call with `+`

> ggplots are essentially layered objects, starting with a call to `ggplot()`
:::

::: {.column width="50%"}
```{r}
#| echo: false
#| fig-asp: 0.75
#| fig-width: 6
<<basic_plot>>
```
:::
:::

## Plots are layered

::: columns
::: {.column .small width="50%"}
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| out-extra: "style='padding-top:0.75em'"
ggplot(data = penguins, aes(x = sex, y = body_mass_g))
```
:::

::: {.column .small width="50%"}
::: r-stack
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot()
```

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_point()
```
:::

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_violin()
```
:::
:::
:::
:::

## Plots are layered

::: columns
::: {.column width="50%"}
### You can add multiple layers

::: {.r-stack .small}
```{r}
#| fig-asp: 0.85
#| fig-width: 5
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot()
```

::: fragment
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot() +
  geom_point(size = 2, colour = "red")
```
:::
:::
:::

::: {.column .fragment}
### Order matters

::: small
```{r}
#| fig-asp: 0.85
#| fig-width: 5
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex, y = body_mass_g)) +
  geom_point(size = 2, colour = "red") +
  geom_boxplot()
```
:::
:::
:::

## Plots are objects

### Any ggplot can be saved as an object

```{r}
g <- ggplot(data = penguins, aes(x = sex, y = body_mass_g))
```

. . .

::: columns
::: {.column width="50%"}
```{r}
#| fig-asp: 0.75
#| fig-width: 5
g
```
:::

::: {.column .fragment width="50%"}
```{r}
#| fig-asp: 0.75
#| fig-width: 5
g + geom_boxplot()
```
:::
:::

# More Geoms

**(Plot types)**

## Geoms: Lines

```{r}
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_line()
```

## Geoms: Histogram

```{r}
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = body_mass_g)) +
  geom_histogram(binwidth = 100)
```

. . .

> **Note**: We only need 1 aesthetic here

## Geoms: Barplots

### Let `ggplot` count your data

```{r}
#| fig-asp: 0.4
#| code-line-numbers: "2"
ggplot(data = penguins, aes(x = sex)) +
  geom_bar()
```

## Geoms: Barplots

### You can also provide the counts

```{r}
#| fig-asp: 0.4
#| code-line-numbers: "6"

# Create our own data frame
species_counts <- data.frame(species = c("Adelie", "Chinstrap", "Gentoo"),
                             n = c(152, 68, 124))

ggplot(data = species_counts, aes(x = species, y = n)) +
  geom_bar(stat = "identity")
```

## Your Turn: Create this plot

```{r}
#| eval: false
library(ggplot2)

ggplot(data = ____, aes(x = ____, y = ____)) +
  geom_____(____)
```

```{r yt_boxplot}
#| echo: false

library(ggplot2)

ggplot(data = penguins, aes(x = island, y = bill_depth_mm)) +
  geom_boxplot(colour = "blue")
```

## Your Turn: Create this plot {visibility=`r visibility`}

```{r}
<<yt_boxplot>>
```

# Showing data by group

## Mapping aesthetics

```{r}
#| fig-asp: 0.5
#| out-width: 80%
#| fig-width: 7.5
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point()
```

## Mapping aesthetics

```{r}
#| fig-asp: 0.5
#| out-width: 80%
#| fig-width: 7.5
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point()
```

[`colour = sex`]{.absolute .note top="20%" right="0"}

## Mapping aesthetics

### `ggplot` automatically populates the legends (combining where it can)

```{r, fig.asp = 0.4}
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex, shape = sex)) +
  geom_point()
```

## Faceting: `facet_wrap()`

```{r}
#| fig-asp: 0.4
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point() +
  facet_wrap(~ species)
```

> Split plots by **one** grouping variable

## Faceting: `facet_grid()`

```{r}
#| fig-asp: 0.4
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point() +
  facet_grid(sex ~ species)
```

> Split plots by **two** grouping variables

## Your Turn: Create this plot

```{r}
#| eval: false
ggplot(data = ____, aes(_____________________________________)) +
  ______________ +
  ______________
```

```{r yt_facet}
#| echo: false
#| fig-asp: 0.4
ggplot(data = penguins, aes(x = sex, y = flipper_length_mm, fill = sex)) +
  geom_boxplot() +
  facet_wrap(~ species)
```

> **Hint:** `colour` is for outlining with a colour, `fill` is for 'filling' with a colour <br> **Too Easy?** Split boxplots by sex **and** island

## Your Turn: Create this plot {visibility=`r visibility`}

```{r}
#| fig-asp: 0.4
<<yt_facet>>
```

> **Hint:** `colour` is for outlining with a colour, `fill` is for 'filling' with a colour <br> **Too Easy?** Split boxplots by sex **and** island

## Your Turn: Create this plot {visibility=`r visibility`}

**Too Easy?**

```{r}
#| fig-asp: 0.4
ggplot(data = penguins, aes(x = sex, y = flipper_length_mm, fill = island)) +
  geom_boxplot() +
  facet_wrap(~ species)
```

> Small change (`fill = sex` to `fill = island`) results in completely different plot

# Trendlines / Regression Lines

## Trendlines / Regression lines

### `geom_line()` is connect-the-dots, not a trend or linear model

```{r, fig.asp = 0.37}
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point() +
  geom_line()
```

. . .

> Not what we're looking for

## Trendlines / Regression lines

### Let's add a trend line properly

Start with basic plot:

```{r, fig.asp = 0.35}
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point()
g
```

## Trendlines / Regression lines

### Add the `stat_smooth()`

-   `lm` is for "linear model" (i.e. trendline)
-   grey ribbon = standard error

```{r}
g + stat_smooth(method = "lm")
```

## Trendlines / Regression lines

### Add the `stat_smooth()`

-   remove the grey ribbon `se = FALSE`

```{r}
g + stat_smooth(method = "lm", se = FALSE)
```

## Trendlines / Regression lines

### A line for each group

-   Specify group (here we use `colour` to specify `species`)

```{r, fig.asp = 0.33}
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point()
g
```

## Trendlines / Regression lines

### A line for each group

-   `stat_smooth()` automatically uses the same grouping

```{r, fig.asp = 0.35, message = FALSE}
g + stat_smooth(method = "lm", se = FALSE)
```

## Trendlines / Regression lines

### A line for each group AND overall

```{r, fig.asp = 0.35, message = FALSE}
g +
  stat_smooth(method = "lm", se = FALSE) +
  stat_smooth(method = "lm", se = FALSE, colour = "black")
```

## Your Turn: Create this plot

-   A scatter plot: Flipper Length by Body Mass grouped by Species
-   With *a single regression line for the overall trend*

> **Too Easy?** Create a separate plot for each sex as well

## Your Turn: Create this plot {visibility=`r visibility`}

-   A scatter plot: Flipper Length by Body Mass grouped by Species
-   With *a single regression line for the overall trend*

```{r, message = FALSE}
#| fig-asp: 0.4
ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) +
  geom_point() +
  stat_smooth(se = FALSE, colour = "black", method = "lm")
```

## Your Turn: Create this plot {visibility=`r visibility`}

**Too Easy?**

```{r, message = FALSE}
#| fig-asp: 0.5
ggplot(data = penguins, aes(x = body_mass_g, y = flipper_length_mm, colour = species)) +
  geom_point() +
  stat_smooth(se = FALSE, colour = "black", method = "lm") +
  facet_wrap(~sex)
```

# Customizing plots

## Customizing: Starting plot

### Let's work with this plot

```{r}
g <- ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point()
```

```{r}
#| echo: false
#| fig.asp: 0.4
#| cache: false
g
```

## Customizing: Labels

```{r}
#| fig-asp: 0.5
g + labs(title = "Bill Length vs. Body Mass",
         x = "Body Mass (g)",
         y = "Bill Length (mm)",
         colour = "Species", tag = "A")
```

. . .

> **Practice for later:** Add proper labels to some of your previous plots

## Customizing: Built-in themes

```{r}
#| echo: false
#| out-width: 100%
#| fig-asp: 0.5
#| fig-width: 12

g1 <- g + theme_bw() + labs(title = "g + theme_bw()")
g2 <- g + theme_classic() + labs(title = "g + theme_classic()")
g3 <- g + theme_minimal() + labs(title = "g + theme_minimal()")
g4 <- g + theme_dark() + labs(title = "g + theme_dark()")
(g1 + g2) / (g3 + g4)
```

## Customizing: Axes

`scale_` + (`x` or `y`) + type (`continuous`, `discrete`, `date`, `datetime`)

-   `scale_x_continuous()`
-   `scale_y_discrete()`
-   etc.

### Common arguments

```{r, eval = FALSE}
g + scale_x_continuous(breaks = seq(0, 20, 10)) # Tick breaks
g + scale_x_continuous(limits = c(0, 15))       # xlim() is a shortcut for this
g + scale_x_continuous(expand = c(0, 0))        # Space between axis and data
```

## Customizing: Axes

### Breaks

```{r}
g + scale_x_continuous(breaks = seq(2500, 6500, 500))
```

## Customizing: Axes

### Limits

```{r}
g + scale_x_continuous(limits = c(3000, 4000))
```

## Customizing: Axes

### Space between origin and axis start

```{r}
g + scale_x_continuous(expand = c(0, 0))
```

## Customizing: Aesthetics

### Using scales

`scale_` + aesthetic [(`colour`, `fill`, `size`, etc.)]{.small} + type [(`manual`, `continuous`, `datetime`, etc.)]{.small}

```{r, fig.asp = 0.4}
g + scale_colour_manual(name = "Type", values = c("green", "purple", "yellow"))
```

## Customizing: Aesthetics

### Using scales

Or be very explicit:

```{r, fig.asp = 0.4}
g + scale_colour_manual(
  name = "Type",
  values = c("Adelie" = "green", "Gentoo" = "purple", "Chinstrap" = "yellow"),
  na.value = "black")
```


## Customizing: Aesthetics

### For colours, consider colour-blind-friendly scale

**`viridis_d` for "discrete" data**

```{r}
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = species)) +
  geom_point() +
  scale_colour_viridis_d(name = "Type")
```

## Customizing: Aesthetics

### For colours, consider colour-blind-friendly scale

**`viridis_c` for "continuous" data**

```{r}
#| code-line-numbers: "3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = flipper_length_mm)) +
  geom_point() +
  scale_colour_viridis_c(name = "Flipper Length (mm)")
```

## Customizing: Aesthetics

### Forcing

Remove the association between a variable and an aesthetic

```{r}
#| code-line-numbers: "2,3"
ggplot(data = penguins, aes(x = body_mass_g, y = bill_length_mm, colour = sex)) +
  geom_point(colour = "darkblue", size = 1) +
  stat_smooth(method = "lm", se = FALSE, colour = "lightblue")
```

> **Note**: When forcing, aesthetic is not inside `aes()`

## Customizing: Legends placement

::: columns
::: {.column width="50%"}
### At the: top, bottom, left, right

```{r, fig.asp = 0.9, fig.width = 5, out.width = "100%"}
g + theme(legend.position = "top")
```
:::

::: {.column width="50%"}
### Exactly here

```{r, fig.asp = 0.9, fig.width = 5, out.width = "100%"}
g + theme(legend.position = c(0.15, 0.7))
```
:::
:::

# Combining plots

## Combining plots with `patchwork`

### Setup

-   Load `patchwork`
-   Create a couple of different plots

```{r}
library(patchwork)

g1 <- ggplot(data = penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
  geom_point()

g2 <- ggplot(data = penguins, aes(x = species, y = flipper_length_mm)) +
  geom_boxplot()

g3 <- ggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g, colour = species)) +
  geom_point()
```

## Combining plots with `patchwork`

### Side-by-Side 2 plots

```{r, fig.asp = 0.4}
g1 + g2
```

## Combining plots with `patchwork`

### Side-by-Side 3 plots

```{r, fig.width = 10, fig.asp = 0.4}
g1 + g2 + g3
```

## Combining plots with `patchwork`

### Stacked 2 plots

```{r, out.width = "50%", fig.asp = 0.8, fig.width = 6}
g1 / g2
```

## Combining plots with `patchwork`

### More complex arrangements

```{r}
g2 + (g1 / g3)
```

## Combining plots with `patchwork`

### More complex arrangements

```{r, out.width = "50%", fig.asp = 0.8, fig.width = 7}
g2 / (g1 + g3)
```

## Combining plots with `patchwork`

### "collect" common legends

```{r, out.width = "50%", fig.asp = 0.8, fig.width = 7}
g2 / (g1 + g3) + plot_layout(guides = "collect")
```

## Combining plots with `patchwork`

### "collect" common legends

```{r, out.width = "50%", fig.asp = 0.8, fig.width = 7}
g2 / (g1 + g3 + plot_layout(guides = "collect"))
```

## Combining plots with `patchwork`

### Annotate

::: small
```{r}
#| fig-width: 8
#| fig-asp: 0.6
#| out-width: 60%
g2 / (g1 + g3) +
  plot_layout(guides = "collect") +
  plot_annotation(title = "Penguins Data Summary",
                  caption = "Fig 1. Penguins Data Summary",
                  tag_levels = "A",
                  tag_suffix = ")")
```
:::

# Saving plots

## Saving plots

### RStudio Export

***Demo***

::: fragment
### `ggsave()`

```{r}
g <- ggplot(penguins, aes(x = sex, y = bill_length_mm, fill = year)) +
  geom_boxplot()

ggsave(filename = "penguins_mass.png", plot = g)
```
:::

## Saving plots

### Publication quality plots

-   Many publications require 'lossless' (pdf, svg, eps, ps) or high quality formats (tiff, png)
-   Specific sizes corresponding to columns widths
-   Minimum resolutions

```{r, cache = FALSE}
g <- ggplot(penguins, aes(x = sex, y = body_mass_g)) +
  geom_boxplot() +
  labs(x = "Sex", y = "Body Mass (g)") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave(filename = "penguins_mass.pdf", plot = g, dpi = 300,
       height = 80, width = 129, units = "mm")
```

```{r, include = FALSE}
unlink(here("penguins_mass.pdf"))
unlink(here("penguins_mass.png"))
```

# Wrapping up

## Wrapping up: Common mistakes {.space-list}

- The **package** is `ggplot`**2**, the function is just **`ggplot()`**
- Did you remember to put the **`+`** at the **end** of the line?
- **Order matters!**
  - If you're using custom `theme()`'s, make sure you put these lines **after** bundled themes like `theme_bw()`, or they will be overwritten
- Variables like 'year' are treated as continuous, but are really categories
  - Wrap them in `factor()`
  - e.g. `ggplot(data = penguins, aes(x = factor(year), y = body_mass_g))` 
  
## Wrapping up: Further reading (all **Free**!) {.space-list}

- RStudio \> Help \> Cheatsheets \> Data Visualization with ggplot2
- [ggplot2 book v3](https://ggplot2-book.org) [(Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen)]{.small}
- [`patchwork` website](https://patchwork.data-imaginist.com/)
- [Cookbook for R](http://www.cookbook-r.com) [(Winston Chang)]{.small}
- [R for Data Science](https://r4ds.had.co.nz) [(Hadley Wickham & Garrett Grolemund)]{.small}
  - [Chp 3 Data Visualization](http://r4ds.had.co.nz/data-visualisation.html)
- [Data Visualization: A practical introduction](http://socviz.co/) [(Kieran Healy)]{.small}

::::{.fragment}

:::{.absolute bottom=20% right=0 width=30%}
### Thank you! 

![](figures/steffi_logo.png)

[{{< fa globe >}} [steffilazerte.ca](https://steffilazerte.ca)]{.small}<br>
[{{< fa envelope >}} <sel@steffilazerte.ca>]{.small}
:::

:::{.small .footnote}
Slides created with Quarto on `r Sys.Date()`
:::
::::

# Extra


## Your Turn!

### Create a figure with...

-   Custom colour mapping (i.e. `scales_....`)
-   Clear, human-readable labels
-   More than one graph, each one tagged (e.g., A) or B))
-   With more than one geom type
-   At least one scatterplot with regression line

`r emo::ji("grin")`

### OR... Load your own data and create a figure of your own!
